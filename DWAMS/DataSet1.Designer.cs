//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DWAMS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private UnnormalAttendanceDataTable tableUnnormalAttendance;
        
        private StaffListForAttendanceDataTable tableStaffListForAttendance;
        
        private TotalStaffMonthlyPayrollDataTable tableTotalStaffMonthlyPayroll;
        
        private spdAbsentListSelectDataTable tablespdAbsentListSelect;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["UnnormalAttendance"] != null)) {
                    base.Tables.Add(new UnnormalAttendanceDataTable(ds.Tables["UnnormalAttendance"]));
                }
                if ((ds.Tables["StaffListForAttendance"] != null)) {
                    base.Tables.Add(new StaffListForAttendanceDataTable(ds.Tables["StaffListForAttendance"]));
                }
                if ((ds.Tables["TotalStaffMonthlyPayroll"] != null)) {
                    base.Tables.Add(new TotalStaffMonthlyPayrollDataTable(ds.Tables["TotalStaffMonthlyPayroll"]));
                }
                if ((ds.Tables["spdAbsentListSelect"] != null)) {
                    base.Tables.Add(new spdAbsentListSelectDataTable(ds.Tables["spdAbsentListSelect"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnnormalAttendanceDataTable UnnormalAttendance {
            get {
                return this.tableUnnormalAttendance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StaffListForAttendanceDataTable StaffListForAttendance {
            get {
                return this.tableStaffListForAttendance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TotalStaffMonthlyPayrollDataTable TotalStaffMonthlyPayroll {
            get {
                return this.tableTotalStaffMonthlyPayroll;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spdAbsentListSelectDataTable spdAbsentListSelect {
            get {
                return this.tablespdAbsentListSelect;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UnnormalAttendance"] != null)) {
                    base.Tables.Add(new UnnormalAttendanceDataTable(ds.Tables["UnnormalAttendance"]));
                }
                if ((ds.Tables["StaffListForAttendance"] != null)) {
                    base.Tables.Add(new StaffListForAttendanceDataTable(ds.Tables["StaffListForAttendance"]));
                }
                if ((ds.Tables["TotalStaffMonthlyPayroll"] != null)) {
                    base.Tables.Add(new TotalStaffMonthlyPayrollDataTable(ds.Tables["TotalStaffMonthlyPayroll"]));
                }
                if ((ds.Tables["spdAbsentListSelect"] != null)) {
                    base.Tables.Add(new spdAbsentListSelectDataTable(ds.Tables["spdAbsentListSelect"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUnnormalAttendance = ((UnnormalAttendanceDataTable)(base.Tables["UnnormalAttendance"]));
            if ((initTable == true)) {
                if ((this.tableUnnormalAttendance != null)) {
                    this.tableUnnormalAttendance.InitVars();
                }
            }
            this.tableStaffListForAttendance = ((StaffListForAttendanceDataTable)(base.Tables["StaffListForAttendance"]));
            if ((initTable == true)) {
                if ((this.tableStaffListForAttendance != null)) {
                    this.tableStaffListForAttendance.InitVars();
                }
            }
            this.tableTotalStaffMonthlyPayroll = ((TotalStaffMonthlyPayrollDataTable)(base.Tables["TotalStaffMonthlyPayroll"]));
            if ((initTable == true)) {
                if ((this.tableTotalStaffMonthlyPayroll != null)) {
                    this.tableTotalStaffMonthlyPayroll.InitVars();
                }
            }
            this.tablespdAbsentListSelect = ((spdAbsentListSelectDataTable)(base.Tables["spdAbsentListSelect"]));
            if ((initTable == true)) {
                if ((this.tablespdAbsentListSelect != null)) {
                    this.tablespdAbsentListSelect.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUnnormalAttendance = new UnnormalAttendanceDataTable();
            base.Tables.Add(this.tableUnnormalAttendance);
            this.tableStaffListForAttendance = new StaffListForAttendanceDataTable();
            base.Tables.Add(this.tableStaffListForAttendance);
            this.tableTotalStaffMonthlyPayroll = new TotalStaffMonthlyPayrollDataTable();
            base.Tables.Add(this.tableTotalStaffMonthlyPayroll);
            this.tablespdAbsentListSelect = new spdAbsentListSelectDataTable();
            base.Tables.Add(this.tablespdAbsentListSelect);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnnormalAttendance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStaffListForAttendance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTotalStaffMonthlyPayroll() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializespdAbsentListSelect() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void UnnormalAttendanceRowChangeEventHandler(object sender, UnnormalAttendanceRowChangeEvent e);
        
        public delegate void StaffListForAttendanceRowChangeEventHandler(object sender, StaffListForAttendanceRowChangeEvent e);
        
        public delegate void TotalStaffMonthlyPayrollRowChangeEventHandler(object sender, TotalStaffMonthlyPayrollRowChangeEvent e);
        
        public delegate void spdAbsentListSelectRowChangeEventHandler(object sender, spdAbsentListSelectRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnnormalAttendanceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAttId;
            
            private global::System.Data.DataColumn columnStaffId;
            
            private global::System.Data.DataColumn columnAttendanceDate;
            
            private global::System.Data.DataColumn columnStaffCode;
            
            private global::System.Data.DataColumn columnStaffName;
            
            private global::System.Data.DataColumn columnDutyIn;
            
            private global::System.Data.DataColumn columnDutyOut;
            
            private global::System.Data.DataColumn columnLateDutyIn;
            
            private global::System.Data.DataColumn columnEarlyDutyOut;
            
            private global::System.Data.DataColumn columnRemark1;
            
            private global::System.Data.DataColumn columnRemark2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnnormalAttendanceDataTable() {
                this.TableName = "UnnormalAttendance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnnormalAttendanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnnormalAttendanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttIdColumn {
                get {
                    return this.columnAttId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffIdColumn {
                get {
                    return this.columnStaffId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttendanceDateColumn {
                get {
                    return this.columnAttendanceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffCodeColumn {
                get {
                    return this.columnStaffCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffNameColumn {
                get {
                    return this.columnStaffName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DutyInColumn {
                get {
                    return this.columnDutyIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DutyOutColumn {
                get {
                    return this.columnDutyOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateDutyInColumn {
                get {
                    return this.columnLateDutyIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EarlyDutyOutColumn {
                get {
                    return this.columnEarlyDutyOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Remark1Column {
                get {
                    return this.columnRemark1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Remark2Column {
                get {
                    return this.columnRemark2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnnormalAttendanceRow this[int index] {
                get {
                    return ((UnnormalAttendanceRow)(this.Rows[index]));
                }
            }
            
            public event UnnormalAttendanceRowChangeEventHandler UnnormalAttendanceRowChanging;
            
            public event UnnormalAttendanceRowChangeEventHandler UnnormalAttendanceRowChanged;
            
            public event UnnormalAttendanceRowChangeEventHandler UnnormalAttendanceRowDeleting;
            
            public event UnnormalAttendanceRowChangeEventHandler UnnormalAttendanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnnormalAttendanceRow(UnnormalAttendanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnnormalAttendanceRow AddUnnormalAttendanceRow(string AttId, string StaffId, System.DateTime AttendanceDate, string StaffCode, string StaffName, System.DateTime DutyIn, System.DateTime DutyOut, decimal LateDutyIn, decimal EarlyDutyOut, string Remark1, string Remark2) {
                UnnormalAttendanceRow rowUnnormalAttendanceRow = ((UnnormalAttendanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AttId,
                        StaffId,
                        AttendanceDate,
                        StaffCode,
                        StaffName,
                        DutyIn,
                        DutyOut,
                        LateDutyIn,
                        EarlyDutyOut,
                        Remark1,
                        Remark2};
                rowUnnormalAttendanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnnormalAttendanceRow);
                return rowUnnormalAttendanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnnormalAttendanceRow FindByAttId(string AttId) {
                return ((UnnormalAttendanceRow)(this.Rows.Find(new object[] {
                            AttId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnnormalAttendanceDataTable cln = ((UnnormalAttendanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnnormalAttendanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAttId = base.Columns["AttId"];
                this.columnStaffId = base.Columns["StaffId"];
                this.columnAttendanceDate = base.Columns["AttendanceDate"];
                this.columnStaffCode = base.Columns["StaffCode"];
                this.columnStaffName = base.Columns["StaffName"];
                this.columnDutyIn = base.Columns["DutyIn"];
                this.columnDutyOut = base.Columns["DutyOut"];
                this.columnLateDutyIn = base.Columns["LateDutyIn"];
                this.columnEarlyDutyOut = base.Columns["EarlyDutyOut"];
                this.columnRemark1 = base.Columns["Remark1"];
                this.columnRemark2 = base.Columns["Remark2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAttId = new global::System.Data.DataColumn("AttId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttId);
                this.columnStaffId = new global::System.Data.DataColumn("StaffId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffId);
                this.columnAttendanceDate = new global::System.Data.DataColumn("AttendanceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttendanceDate);
                this.columnStaffCode = new global::System.Data.DataColumn("StaffCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffCode);
                this.columnStaffName = new global::System.Data.DataColumn("StaffName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffName);
                this.columnDutyIn = new global::System.Data.DataColumn("DutyIn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDutyIn);
                this.columnDutyOut = new global::System.Data.DataColumn("DutyOut", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDutyOut);
                this.columnLateDutyIn = new global::System.Data.DataColumn("LateDutyIn", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateDutyIn);
                this.columnEarlyDutyOut = new global::System.Data.DataColumn("EarlyDutyOut", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEarlyDutyOut);
                this.columnRemark1 = new global::System.Data.DataColumn("Remark1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark1);
                this.columnRemark2 = new global::System.Data.DataColumn("Remark2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark2);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAttId}, true));
                this.columnAttId.AllowDBNull = false;
                this.columnAttId.Unique = true;
                this.columnAttId.MaxLength = 36;
                this.columnStaffId.AllowDBNull = false;
                this.columnStaffId.MaxLength = 36;
                this.columnAttendanceDate.AllowDBNull = false;
                this.columnStaffCode.AllowDBNull = false;
                this.columnStaffCode.MaxLength = 50;
                this.columnStaffName.AllowDBNull = false;
                this.columnStaffName.MaxLength = 200;
                this.columnDutyIn.AllowDBNull = false;
                this.columnLateDutyIn.AllowDBNull = false;
                this.columnRemark1.MaxLength = 500;
                this.columnRemark2.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnnormalAttendanceRow NewUnnormalAttendanceRow() {
                return ((UnnormalAttendanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnnormalAttendanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnnormalAttendanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnnormalAttendanceRowChanged != null)) {
                    this.UnnormalAttendanceRowChanged(this, new UnnormalAttendanceRowChangeEvent(((UnnormalAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnnormalAttendanceRowChanging != null)) {
                    this.UnnormalAttendanceRowChanging(this, new UnnormalAttendanceRowChangeEvent(((UnnormalAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnnormalAttendanceRowDeleted != null)) {
                    this.UnnormalAttendanceRowDeleted(this, new UnnormalAttendanceRowChangeEvent(((UnnormalAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnnormalAttendanceRowDeleting != null)) {
                    this.UnnormalAttendanceRowDeleting(this, new UnnormalAttendanceRowChangeEvent(((UnnormalAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnnormalAttendanceRow(UnnormalAttendanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnnormalAttendanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StaffListForAttendanceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStaffId;
            
            private global::System.Data.DataColumn columnStaffCode;
            
            private global::System.Data.DataColumn columnStaffName;
            
            private global::System.Data.DataColumn columnBasicSalary;
            
            private global::System.Data.DataColumn columnTotalLate;
            
            private global::System.Data.DataColumn columnTotalEarly;
            
            private global::System.Data.DataColumn columnAbsentDay;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StaffListForAttendanceDataTable() {
                this.TableName = "StaffListForAttendance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StaffListForAttendanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StaffListForAttendanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffIdColumn {
                get {
                    return this.columnStaffId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffCodeColumn {
                get {
                    return this.columnStaffCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffNameColumn {
                get {
                    return this.columnStaffName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasicSalaryColumn {
                get {
                    return this.columnBasicSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLateColumn {
                get {
                    return this.columnTotalLate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalEarlyColumn {
                get {
                    return this.columnTotalEarly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsentDayColumn {
                get {
                    return this.columnAbsentDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StaffListForAttendanceRow this[int index] {
                get {
                    return ((StaffListForAttendanceRow)(this.Rows[index]));
                }
            }
            
            public event StaffListForAttendanceRowChangeEventHandler StaffListForAttendanceRowChanging;
            
            public event StaffListForAttendanceRowChangeEventHandler StaffListForAttendanceRowChanged;
            
            public event StaffListForAttendanceRowChangeEventHandler StaffListForAttendanceRowDeleting;
            
            public event StaffListForAttendanceRowChangeEventHandler StaffListForAttendanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStaffListForAttendanceRow(StaffListForAttendanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StaffListForAttendanceRow AddStaffListForAttendanceRow(string StaffId, string StaffCode, string StaffName, decimal BasicSalary, decimal TotalLate, decimal TotalEarly, int AbsentDay) {
                StaffListForAttendanceRow rowStaffListForAttendanceRow = ((StaffListForAttendanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StaffId,
                        StaffCode,
                        StaffName,
                        BasicSalary,
                        TotalLate,
                        TotalEarly,
                        AbsentDay};
                rowStaffListForAttendanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStaffListForAttendanceRow);
                return rowStaffListForAttendanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StaffListForAttendanceRow FindByStaffId(string StaffId) {
                return ((StaffListForAttendanceRow)(this.Rows.Find(new object[] {
                            StaffId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StaffListForAttendanceDataTable cln = ((StaffListForAttendanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StaffListForAttendanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStaffId = base.Columns["StaffId"];
                this.columnStaffCode = base.Columns["StaffCode"];
                this.columnStaffName = base.Columns["StaffName"];
                this.columnBasicSalary = base.Columns["BasicSalary"];
                this.columnTotalLate = base.Columns["TotalLate"];
                this.columnTotalEarly = base.Columns["TotalEarly"];
                this.columnAbsentDay = base.Columns["AbsentDay"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStaffId = new global::System.Data.DataColumn("StaffId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffId);
                this.columnStaffCode = new global::System.Data.DataColumn("StaffCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffCode);
                this.columnStaffName = new global::System.Data.DataColumn("StaffName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffName);
                this.columnBasicSalary = new global::System.Data.DataColumn("BasicSalary", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasicSalary);
                this.columnTotalLate = new global::System.Data.DataColumn("TotalLate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLate);
                this.columnTotalEarly = new global::System.Data.DataColumn("TotalEarly", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalEarly);
                this.columnAbsentDay = new global::System.Data.DataColumn("AbsentDay", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsentDay);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStaffId}, true));
                this.columnStaffId.AllowDBNull = false;
                this.columnStaffId.Unique = true;
                this.columnStaffId.MaxLength = 36;
                this.columnStaffCode.AllowDBNull = false;
                this.columnStaffCode.MaxLength = 50;
                this.columnStaffName.AllowDBNull = false;
                this.columnStaffName.MaxLength = 200;
                this.columnBasicSalary.AllowDBNull = false;
                this.columnTotalLate.ReadOnly = true;
                this.columnTotalEarly.ReadOnly = true;
                this.columnAbsentDay.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StaffListForAttendanceRow NewStaffListForAttendanceRow() {
                return ((StaffListForAttendanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StaffListForAttendanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StaffListForAttendanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StaffListForAttendanceRowChanged != null)) {
                    this.StaffListForAttendanceRowChanged(this, new StaffListForAttendanceRowChangeEvent(((StaffListForAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StaffListForAttendanceRowChanging != null)) {
                    this.StaffListForAttendanceRowChanging(this, new StaffListForAttendanceRowChangeEvent(((StaffListForAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StaffListForAttendanceRowDeleted != null)) {
                    this.StaffListForAttendanceRowDeleted(this, new StaffListForAttendanceRowChangeEvent(((StaffListForAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StaffListForAttendanceRowDeleting != null)) {
                    this.StaffListForAttendanceRowDeleting(this, new StaffListForAttendanceRowChangeEvent(((StaffListForAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStaffListForAttendanceRow(StaffListForAttendanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StaffListForAttendanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TotalStaffMonthlyPayrollDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStaffId;
            
            private global::System.Data.DataColumn columnPaymentId;
            
            private global::System.Data.DataColumn columnMonthDate;
            
            private global::System.Data.DataColumn columnStaffCode;
            
            private global::System.Data.DataColumn columnStaffName;
            
            private global::System.Data.DataColumn columnPaymentDate;
            
            private global::System.Data.DataColumn columnBasicSalary;
            
            private global::System.Data.DataColumn columnFine;
            
            private global::System.Data.DataColumn columnBonus;
            
            private global::System.Data.DataColumn columnNetSalary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalStaffMonthlyPayrollDataTable() {
                this.TableName = "TotalStaffMonthlyPayroll";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TotalStaffMonthlyPayrollDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TotalStaffMonthlyPayrollDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffIdColumn {
                get {
                    return this.columnStaffId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentIdColumn {
                get {
                    return this.columnPaymentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthDateColumn {
                get {
                    return this.columnMonthDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffCodeColumn {
                get {
                    return this.columnStaffCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffNameColumn {
                get {
                    return this.columnStaffName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasicSalaryColumn {
                get {
                    return this.columnBasicSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FineColumn {
                get {
                    return this.columnFine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BonusColumn {
                get {
                    return this.columnBonus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetSalaryColumn {
                get {
                    return this.columnNetSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalStaffMonthlyPayrollRow this[int index] {
                get {
                    return ((TotalStaffMonthlyPayrollRow)(this.Rows[index]));
                }
            }
            
            public event TotalStaffMonthlyPayrollRowChangeEventHandler TotalStaffMonthlyPayrollRowChanging;
            
            public event TotalStaffMonthlyPayrollRowChangeEventHandler TotalStaffMonthlyPayrollRowChanged;
            
            public event TotalStaffMonthlyPayrollRowChangeEventHandler TotalStaffMonthlyPayrollRowDeleting;
            
            public event TotalStaffMonthlyPayrollRowChangeEventHandler TotalStaffMonthlyPayrollRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTotalStaffMonthlyPayrollRow(TotalStaffMonthlyPayrollRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalStaffMonthlyPayrollRow AddTotalStaffMonthlyPayrollRow(string StaffId, string PaymentId, System.DateTime MonthDate, string StaffCode, string StaffName, System.DateTime PaymentDate, decimal BasicSalary, decimal Fine, decimal Bonus, decimal NetSalary) {
                TotalStaffMonthlyPayrollRow rowTotalStaffMonthlyPayrollRow = ((TotalStaffMonthlyPayrollRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StaffId,
                        PaymentId,
                        MonthDate,
                        StaffCode,
                        StaffName,
                        PaymentDate,
                        BasicSalary,
                        Fine,
                        Bonus,
                        NetSalary};
                rowTotalStaffMonthlyPayrollRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTotalStaffMonthlyPayrollRow);
                return rowTotalStaffMonthlyPayrollRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalStaffMonthlyPayrollRow FindByPaymentId(string PaymentId) {
                return ((TotalStaffMonthlyPayrollRow)(this.Rows.Find(new object[] {
                            PaymentId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TotalStaffMonthlyPayrollDataTable cln = ((TotalStaffMonthlyPayrollDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TotalStaffMonthlyPayrollDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStaffId = base.Columns["StaffId"];
                this.columnPaymentId = base.Columns["PaymentId"];
                this.columnMonthDate = base.Columns["MonthDate"];
                this.columnStaffCode = base.Columns["StaffCode"];
                this.columnStaffName = base.Columns["StaffName"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnBasicSalary = base.Columns["BasicSalary"];
                this.columnFine = base.Columns["Fine"];
                this.columnBonus = base.Columns["Bonus"];
                this.columnNetSalary = base.Columns["NetSalary"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStaffId = new global::System.Data.DataColumn("StaffId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffId);
                this.columnPaymentId = new global::System.Data.DataColumn("PaymentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentId);
                this.columnMonthDate = new global::System.Data.DataColumn("MonthDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthDate);
                this.columnStaffCode = new global::System.Data.DataColumn("StaffCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffCode);
                this.columnStaffName = new global::System.Data.DataColumn("StaffName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffName);
                this.columnPaymentDate = new global::System.Data.DataColumn("PaymentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnBasicSalary = new global::System.Data.DataColumn("BasicSalary", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasicSalary);
                this.columnFine = new global::System.Data.DataColumn("Fine", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFine);
                this.columnBonus = new global::System.Data.DataColumn("Bonus", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonus);
                this.columnNetSalary = new global::System.Data.DataColumn("NetSalary", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetSalary);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPaymentId}, true));
                this.columnStaffId.AllowDBNull = false;
                this.columnStaffId.MaxLength = 36;
                this.columnPaymentId.AllowDBNull = false;
                this.columnPaymentId.Unique = true;
                this.columnPaymentId.MaxLength = 36;
                this.columnMonthDate.AllowDBNull = false;
                this.columnStaffCode.AllowDBNull = false;
                this.columnStaffCode.MaxLength = 50;
                this.columnStaffName.AllowDBNull = false;
                this.columnStaffName.MaxLength = 200;
                this.columnPaymentDate.AllowDBNull = false;
                this.columnBasicSalary.AllowDBNull = false;
                this.columnFine.AllowDBNull = false;
                this.columnBonus.AllowDBNull = false;
                this.columnNetSalary.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalStaffMonthlyPayrollRow NewTotalStaffMonthlyPayrollRow() {
                return ((TotalStaffMonthlyPayrollRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TotalStaffMonthlyPayrollRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TotalStaffMonthlyPayrollRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TotalStaffMonthlyPayrollRowChanged != null)) {
                    this.TotalStaffMonthlyPayrollRowChanged(this, new TotalStaffMonthlyPayrollRowChangeEvent(((TotalStaffMonthlyPayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TotalStaffMonthlyPayrollRowChanging != null)) {
                    this.TotalStaffMonthlyPayrollRowChanging(this, new TotalStaffMonthlyPayrollRowChangeEvent(((TotalStaffMonthlyPayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TotalStaffMonthlyPayrollRowDeleted != null)) {
                    this.TotalStaffMonthlyPayrollRowDeleted(this, new TotalStaffMonthlyPayrollRowChangeEvent(((TotalStaffMonthlyPayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TotalStaffMonthlyPayrollRowDeleting != null)) {
                    this.TotalStaffMonthlyPayrollRowDeleting(this, new TotalStaffMonthlyPayrollRowChangeEvent(((TotalStaffMonthlyPayrollRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTotalStaffMonthlyPayrollRow(TotalStaffMonthlyPayrollRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TotalStaffMonthlyPayrollDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class spdAbsentListSelectDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPosition;
            
            private global::System.Data.DataColumn columnDepName;
            
            private global::System.Data.DataColumn columnStaffId;
            
            private global::System.Data.DataColumn columnStaffCode;
            
            private global::System.Data.DataColumn columnStaffName;
            
            private global::System.Data.DataColumn columnAttendanceDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdAbsentListSelectDataTable() {
                this.TableName = "spdAbsentListSelect";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spdAbsentListSelectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected spdAbsentListSelectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepNameColumn {
                get {
                    return this.columnDepName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffIdColumn {
                get {
                    return this.columnStaffId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffCodeColumn {
                get {
                    return this.columnStaffCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffNameColumn {
                get {
                    return this.columnStaffName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttendanceDateColumn {
                get {
                    return this.columnAttendanceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdAbsentListSelectRow this[int index] {
                get {
                    return ((spdAbsentListSelectRow)(this.Rows[index]));
                }
            }
            
            public event spdAbsentListSelectRowChangeEventHandler spdAbsentListSelectRowChanging;
            
            public event spdAbsentListSelectRowChangeEventHandler spdAbsentListSelectRowChanged;
            
            public event spdAbsentListSelectRowChangeEventHandler spdAbsentListSelectRowDeleting;
            
            public event spdAbsentListSelectRowChangeEventHandler spdAbsentListSelectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddspdAbsentListSelectRow(spdAbsentListSelectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdAbsentListSelectRow AddspdAbsentListSelectRow(string Position, string DepName, string StaffId, string StaffCode, string StaffName, System.DateTime AttendanceDate) {
                spdAbsentListSelectRow rowspdAbsentListSelectRow = ((spdAbsentListSelectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Position,
                        DepName,
                        StaffId,
                        StaffCode,
                        StaffName,
                        AttendanceDate};
                rowspdAbsentListSelectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowspdAbsentListSelectRow);
                return rowspdAbsentListSelectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdAbsentListSelectRow FindByStaffId(string StaffId) {
                return ((spdAbsentListSelectRow)(this.Rows.Find(new object[] {
                            StaffId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                spdAbsentListSelectDataTable cln = ((spdAbsentListSelectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new spdAbsentListSelectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPosition = base.Columns["Position"];
                this.columnDepName = base.Columns["DepName"];
                this.columnStaffId = base.Columns["StaffId"];
                this.columnStaffCode = base.Columns["StaffCode"];
                this.columnStaffName = base.Columns["StaffName"];
                this.columnAttendanceDate = base.Columns["AttendanceDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPosition = new global::System.Data.DataColumn("Position", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosition);
                this.columnDepName = new global::System.Data.DataColumn("DepName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepName);
                this.columnStaffId = new global::System.Data.DataColumn("StaffId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffId);
                this.columnStaffCode = new global::System.Data.DataColumn("StaffCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffCode);
                this.columnStaffName = new global::System.Data.DataColumn("StaffName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffName);
                this.columnAttendanceDate = new global::System.Data.DataColumn("AttendanceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttendanceDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStaffId}, true));
                this.columnPosition.AllowDBNull = false;
                this.columnPosition.MaxLength = 200;
                this.columnDepName.AllowDBNull = false;
                this.columnDepName.MaxLength = 100;
                this.columnStaffId.AllowDBNull = false;
                this.columnStaffId.Unique = true;
                this.columnStaffId.MaxLength = 36;
                this.columnStaffCode.AllowDBNull = false;
                this.columnStaffCode.MaxLength = 50;
                this.columnStaffName.AllowDBNull = false;
                this.columnStaffName.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdAbsentListSelectRow NewspdAbsentListSelectRow() {
                return ((spdAbsentListSelectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new spdAbsentListSelectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(spdAbsentListSelectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spdAbsentListSelectRowChanged != null)) {
                    this.spdAbsentListSelectRowChanged(this, new spdAbsentListSelectRowChangeEvent(((spdAbsentListSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spdAbsentListSelectRowChanging != null)) {
                    this.spdAbsentListSelectRowChanging(this, new spdAbsentListSelectRowChangeEvent(((spdAbsentListSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spdAbsentListSelectRowDeleted != null)) {
                    this.spdAbsentListSelectRowDeleted(this, new spdAbsentListSelectRowChangeEvent(((spdAbsentListSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spdAbsentListSelectRowDeleting != null)) {
                    this.spdAbsentListSelectRowDeleting(this, new spdAbsentListSelectRowChangeEvent(((spdAbsentListSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovespdAbsentListSelectRow(spdAbsentListSelectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "spdAbsentListSelectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnnormalAttendanceRow : global::System.Data.DataRow {
            
            private UnnormalAttendanceDataTable tableUnnormalAttendance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnnormalAttendanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnnormalAttendance = ((UnnormalAttendanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AttId {
                get {
                    return ((string)(this[this.tableUnnormalAttendance.AttIdColumn]));
                }
                set {
                    this[this.tableUnnormalAttendance.AttIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffId {
                get {
                    return ((string)(this[this.tableUnnormalAttendance.StaffIdColumn]));
                }
                set {
                    this[this.tableUnnormalAttendance.StaffIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AttendanceDate {
                get {
                    return ((global::System.DateTime)(this[this.tableUnnormalAttendance.AttendanceDateColumn]));
                }
                set {
                    this[this.tableUnnormalAttendance.AttendanceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffCode {
                get {
                    return ((string)(this[this.tableUnnormalAttendance.StaffCodeColumn]));
                }
                set {
                    this[this.tableUnnormalAttendance.StaffCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffName {
                get {
                    return ((string)(this[this.tableUnnormalAttendance.StaffNameColumn]));
                }
                set {
                    this[this.tableUnnormalAttendance.StaffNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DutyIn {
                get {
                    return ((global::System.DateTime)(this[this.tableUnnormalAttendance.DutyInColumn]));
                }
                set {
                    this[this.tableUnnormalAttendance.DutyInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DutyOut {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnnormalAttendance.DutyOutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DutyOut\' in table \'UnnormalAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnnormalAttendance.DutyOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LateDutyIn {
                get {
                    return ((decimal)(this[this.tableUnnormalAttendance.LateDutyInColumn]));
                }
                set {
                    this[this.tableUnnormalAttendance.LateDutyInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EarlyDutyOut {
                get {
                    try {
                        return ((decimal)(this[this.tableUnnormalAttendance.EarlyDutyOutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EarlyDutyOut\' in table \'UnnormalAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnnormalAttendance.EarlyDutyOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark1 {
                get {
                    try {
                        return ((string)(this[this.tableUnnormalAttendance.Remark1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark1\' in table \'UnnormalAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnnormalAttendance.Remark1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark2 {
                get {
                    try {
                        return ((string)(this[this.tableUnnormalAttendance.Remark2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark2\' in table \'UnnormalAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnnormalAttendance.Remark2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDutyOutNull() {
                return this.IsNull(this.tableUnnormalAttendance.DutyOutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDutyOutNull() {
                this[this.tableUnnormalAttendance.DutyOutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEarlyDutyOutNull() {
                return this.IsNull(this.tableUnnormalAttendance.EarlyDutyOutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEarlyDutyOutNull() {
                this[this.tableUnnormalAttendance.EarlyDutyOutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemark1Null() {
                return this.IsNull(this.tableUnnormalAttendance.Remark1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemark1Null() {
                this[this.tableUnnormalAttendance.Remark1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemark2Null() {
                return this.IsNull(this.tableUnnormalAttendance.Remark2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemark2Null() {
                this[this.tableUnnormalAttendance.Remark2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StaffListForAttendanceRow : global::System.Data.DataRow {
            
            private StaffListForAttendanceDataTable tableStaffListForAttendance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StaffListForAttendanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStaffListForAttendance = ((StaffListForAttendanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffId {
                get {
                    return ((string)(this[this.tableStaffListForAttendance.StaffIdColumn]));
                }
                set {
                    this[this.tableStaffListForAttendance.StaffIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffCode {
                get {
                    return ((string)(this[this.tableStaffListForAttendance.StaffCodeColumn]));
                }
                set {
                    this[this.tableStaffListForAttendance.StaffCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffName {
                get {
                    return ((string)(this[this.tableStaffListForAttendance.StaffNameColumn]));
                }
                set {
                    this[this.tableStaffListForAttendance.StaffNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BasicSalary {
                get {
                    return ((decimal)(this[this.tableStaffListForAttendance.BasicSalaryColumn]));
                }
                set {
                    this[this.tableStaffListForAttendance.BasicSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLate {
                get {
                    try {
                        return ((decimal)(this[this.tableStaffListForAttendance.TotalLateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalLate\' in table \'StaffListForAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStaffListForAttendance.TotalLateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalEarly {
                get {
                    try {
                        return ((decimal)(this[this.tableStaffListForAttendance.TotalEarlyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalEarly\' in table \'StaffListForAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStaffListForAttendance.TotalEarlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AbsentDay {
                get {
                    try {
                        return ((int)(this[this.tableStaffListForAttendance.AbsentDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AbsentDay\' in table \'StaffListForAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStaffListForAttendance.AbsentDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalLateNull() {
                return this.IsNull(this.tableStaffListForAttendance.TotalLateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalLateNull() {
                this[this.tableStaffListForAttendance.TotalLateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalEarlyNull() {
                return this.IsNull(this.tableStaffListForAttendance.TotalEarlyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalEarlyNull() {
                this[this.tableStaffListForAttendance.TotalEarlyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbsentDayNull() {
                return this.IsNull(this.tableStaffListForAttendance.AbsentDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbsentDayNull() {
                this[this.tableStaffListForAttendance.AbsentDayColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TotalStaffMonthlyPayrollRow : global::System.Data.DataRow {
            
            private TotalStaffMonthlyPayrollDataTable tableTotalStaffMonthlyPayroll;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TotalStaffMonthlyPayrollRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTotalStaffMonthlyPayroll = ((TotalStaffMonthlyPayrollDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffId {
                get {
                    return ((string)(this[this.tableTotalStaffMonthlyPayroll.StaffIdColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.StaffIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentId {
                get {
                    return ((string)(this[this.tableTotalStaffMonthlyPayroll.PaymentIdColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.PaymentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MonthDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTotalStaffMonthlyPayroll.MonthDateColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.MonthDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffCode {
                get {
                    return ((string)(this[this.tableTotalStaffMonthlyPayroll.StaffCodeColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.StaffCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffName {
                get {
                    return ((string)(this[this.tableTotalStaffMonthlyPayroll.StaffNameColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.StaffNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PaymentDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTotalStaffMonthlyPayroll.PaymentDateColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.PaymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BasicSalary {
                get {
                    return ((decimal)(this[this.tableTotalStaffMonthlyPayroll.BasicSalaryColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.BasicSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Fine {
                get {
                    return ((decimal)(this[this.tableTotalStaffMonthlyPayroll.FineColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.FineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Bonus {
                get {
                    return ((decimal)(this[this.tableTotalStaffMonthlyPayroll.BonusColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.BonusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NetSalary {
                get {
                    return ((decimal)(this[this.tableTotalStaffMonthlyPayroll.NetSalaryColumn]));
                }
                set {
                    this[this.tableTotalStaffMonthlyPayroll.NetSalaryColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class spdAbsentListSelectRow : global::System.Data.DataRow {
            
            private spdAbsentListSelectDataTable tablespdAbsentListSelect;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal spdAbsentListSelectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablespdAbsentListSelect = ((spdAbsentListSelectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Position {
                get {
                    return ((string)(this[this.tablespdAbsentListSelect.PositionColumn]));
                }
                set {
                    this[this.tablespdAbsentListSelect.PositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepName {
                get {
                    return ((string)(this[this.tablespdAbsentListSelect.DepNameColumn]));
                }
                set {
                    this[this.tablespdAbsentListSelect.DepNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffId {
                get {
                    return ((string)(this[this.tablespdAbsentListSelect.StaffIdColumn]));
                }
                set {
                    this[this.tablespdAbsentListSelect.StaffIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffCode {
                get {
                    return ((string)(this[this.tablespdAbsentListSelect.StaffCodeColumn]));
                }
                set {
                    this[this.tablespdAbsentListSelect.StaffCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StaffName {
                get {
                    return ((string)(this[this.tablespdAbsentListSelect.StaffNameColumn]));
                }
                set {
                    this[this.tablespdAbsentListSelect.StaffNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AttendanceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablespdAbsentListSelect.AttendanceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AttendanceDate\' in table \'spdAbsentListSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespdAbsentListSelect.AttendanceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttendanceDateNull() {
                return this.IsNull(this.tablespdAbsentListSelect.AttendanceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttendanceDateNull() {
                this[this.tablespdAbsentListSelect.AttendanceDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnnormalAttendanceRowChangeEvent : global::System.EventArgs {
            
            private UnnormalAttendanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnnormalAttendanceRowChangeEvent(UnnormalAttendanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnnormalAttendanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StaffListForAttendanceRowChangeEvent : global::System.EventArgs {
            
            private StaffListForAttendanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StaffListForAttendanceRowChangeEvent(StaffListForAttendanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StaffListForAttendanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TotalStaffMonthlyPayrollRowChangeEvent : global::System.EventArgs {
            
            private TotalStaffMonthlyPayrollRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalStaffMonthlyPayrollRowChangeEvent(TotalStaffMonthlyPayrollRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalStaffMonthlyPayrollRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class spdAbsentListSelectRowChangeEvent : global::System.EventArgs {
            
            private spdAbsentListSelectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdAbsentListSelectRowChangeEvent(spdAbsentListSelectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public spdAbsentListSelectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591